import { ButtonInteraction, ChannelType, CommandInteraction, EmbedBuilder, GuildMember, Interaction, TextChannel, VoiceBasedChannel, VoiceChannel } from "discord.js";
import { ClientParams } from "../../../types/ClientTypes";
import { Prisma, PrismaClient } from "@prisma/client";
import { poru } from "../../../music/poruPlayer";
import { Player } from "poru";
import trackEmbed from "../utils/trackEmbed";
import queueMessage from "../utils/queueMessage";


const prisma: PrismaClient = new PrismaClient(); 

async function InteractionCreateEvent(client: ClientParams){
    client.on("interactionCreate", async(interaction: Interaction) =>{
        // create commandInteraction for save interaction but in CommandInteraction Type
        const commandInteraction: CommandInteraction = interaction as CommandInteraction;

        // check is button interaction 
        if(!interaction.isButton) return;

        // filter channel from name
        if(!(interaction.channel instanceof TextChannel)) return;
        if(!interaction.channel.name.includes("music") && !interaction.channel.name.includes(`${client.user?.username}-music`) && !interaction.channel.name.includes(`${client.user?.username}`)) return;

        
        // check channel from database
        const getMusicChannelData = await prisma.guildMusicChannel.findUnique({
            where: {
                guild_id: interaction.guild?.id,
                channel_id: interaction.channel?.id
            },
            select: {
                content_banner_id: true,
                content_playing_id: true,
                content_queue_id: true
            }
        });
        if(!getMusicChannelData) return;

        

        // check player is still playing?
        const player: Player | undefined = poru.players.get(interaction.guild!.id);
        if(!player || !player.queue){
            return commandInteraction.reply({
                content: 'üü° | ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á ‡∏ì ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢‡∏ô‡πà‡∏∞',
                ephemeral: true,
            });
        }

        // check is user connect voice channel?
        const member: GuildMember = interaction.member as GuildMember;
        const voiceChannel: VoiceBasedChannel | null = member.voice.channel;
        if(!voiceChannel){
            return commandInteraction.reply({
                content: 'üü° | ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡πà‡∏∞',
                ephemeral: true,
            });
        }

        // check if bot is in use by another channel
        const bot: GuildMember | undefined = interaction.guild?.members.cache.get(client.user!.id);
        if(bot?.voice.channel && !voiceChannel.equals(bot.voice.channel)){
            return member.send({
                embeds: [
                    new EmbedBuilder()
                        .setDescription('üî¥ | ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ô‡πà‡∏∞')
                        .setColor("Red")
                        .setFooter({ 
                            text: client.user!.username 
                        })
                        .setTimestamp(),
                ],
            }).then(async msg =>{
                await msg.react('üö´').catch(err => console.log(err));
                setTimeout(async() =>{
                    await msg.delete();
                }, 15000);
            });
        }

        // create buttonInteraction for save interaction but in buttonInteraction Type
        const buttonInteraction: ButtonInteraction = interaction as ButtonInteraction;
        // find trackContent message and queueContent message from id
        const trackContent = await interaction.channel.messages.fetch(getMusicChannelData.content_playing_id);
        const queueContent = await interaction.channel.messages.fetch(getMusicChannelData.content_queue_id);


        console.log(buttonInteraction.customId);
        if(buttonInteraction.customId === 'music_pause'){
            if(!player.isPaused){
                await player.pause(true);
                await commandInteraction.reply('üü¢ | ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏û‡∏•‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡πÄ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞').then(async(): Promise<void> => { 
                    setTimeout(async() =>{
                        await commandInteraction.deleteReply();
                    }, 5000);
                });
            }
            else if(player.isPaused){
                await player.pause(false);
                await commandInteraction.reply('üü¢ | ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ï‡πà‡∏≠‡πÄ‡πÄ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞').then(async(): Promise<void> => { 
                    setTimeout(async() =>{
                        await commandInteraction.deleteReply();
                    }, 5000); 
                });
            } 
        }
        else if(buttonInteraction.customId === 'music_skip'){
            await player.skip();
            await commandInteraction.reply('üü¢ | ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡πÄ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞').then(async(): Promise<void> => { 
                setTimeout(async() =>{
                    await commandInteraction.deleteReply();
                }, 5000); 
            });
        }
        else if(buttonInteraction.customId === 'music_stop'){
            if(player.isPlaying){
                player.destroy();
                await commandInteraction.reply('üü¢ | ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡πÄ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞').then(async(): Promise<void> => { 
                    setTimeout(async() =>{
                        await commandInteraction.deleteReply();
                    }, 5000); 
                });
            }
        }
        else if(buttonInteraction.customId === 'music_loop'){
            if(player.loop === "NONE"){
                player.setLoop("QUEUE");
                await commandInteraction.reply(`üü¢ | ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏ô‡∏ã‡πâ‡∏≥‡πÄ‡∏û‡∏•‡∏á‡πÄ‡πÄ‡∏ö‡∏ö \`‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\` ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡πÄ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞`).then(async(): Promise<void> =>{ 
                    await trackContent.edit({ 
                        embeds: [await trackEmbed(client, player)]
                    });
                    setTimeout(async() =>{
                        await commandInteraction.deleteReply();
                    }, 5000); 
                });
            }
            else if(player.loop === "QUEUE"){
                player.setLoop("TRACK");
                await commandInteraction.reply(`üü¢ | ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏ô‡∏ã‡πâ‡∏≥‡πÄ‡∏û‡∏•‡∏á‡πÄ‡πÄ‡∏ö‡∏ö \`‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß\` ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡πÄ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞`).then(async(): Promise<void> =>{ 
                    await trackContent.edit({ 
                        embeds: [await trackEmbed(client, player)]
                    });
                    setTimeout(async() =>{
                    await commandInteraction.deleteReply();
                    }, 5000); 
                });
            }
            else if(player.loop === "TRACK"){
                player.setLoop("NONE");
                await commandInteraction.reply(`üü¢ | ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏ß‡∏ô‡∏ã‡πâ‡∏≥‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡πÄ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞`).then(async(): Promise<void> =>{ 
                    await trackContent.edit({
                        embeds: [await trackEmbed(client, player)]
                    });
                    setTimeout(async() =>{
                        await commandInteraction.deleteReply();
                    }, 5000); 
                });
            }
        }
        else if(buttonInteraction.customId === 'music_shuffle'){
            if(!player.queue || !player.queue.length || player.queue.length == 0){
                await commandInteraction.reply('üü° | ‡πÄ‡∏≠‡πä‡∏∞! ‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏°‡∏≤‡∏Å‡∏û‡∏≠‡∏ô‡πà‡∏∞‡∏Ñ‡∏∞').then(async(): Promise<void> =>{ 
                    setTimeout(async() =>{
                        await commandInteraction.deleteReply();
                    }, 5000); 
                });
            }
            else{
                player.queue.shuffle();
                await commandInteraction.reply('üü¢ | ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏ß‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡πÄ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞').then(async(): Promise<void> =>{ 
                    await queueContent.edit({ content: await queueMessage(client, player)});
                    setTimeout(async() =>{
                        await commandInteraction.deleteReply();
                    }, 5000); 
                });
            }
        }
        else if(buttonInteraction.customId === 'music_volup'){
            let newVol: number = player.volume + 10;
            if(newVol < 110){
                await player.setVolume(newVol);
                await commandInteraction.reply(`üü¢ | ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô \`${newVol}\` ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡πÄ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞`).then(async(): Promise<void> =>{ 
                    await trackContent.edit({ embeds: [ await trackEmbed(client, player) ]});
                    setTimeout(async() =>{
                        await commandInteraction.deleteReply();
                    }, 5000); 
                });
            }
            else if(newVol >= 110){
                await commandInteraction.reply(`üü° | ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡πÄ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞`).then(async(): Promise<void> =>{ 
                    setTimeout(async() =>{
                        await commandInteraction.deleteReply();
                    }, 5000); 
                });
            }
        }
        else if(buttonInteraction.customId === 'music_voldown'){
            let newVol: number = player.volume - 10;
            if(newVol > 0){
                await player.setVolume(newVol);
                await commandInteraction.reply(`üü¢ | ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô \`${newVol}\` ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡πÄ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞`).then(async(): Promise<void> =>{ 
                    await trackContent.edit({ embeds: [ await trackEmbed(client, player) ]});
                    setTimeout(async() =>{
                        await commandInteraction.deleteReply();
                    }, 5000); 
                });
            }   
            else if(newVol < 0){
                await commandInteraction.reply(`üü° | ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡πÄ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞`).then(async(): Promise<void> =>{ 
                    setTimeout(async() =>{
                        await commandInteraction.deleteReply();
                    }, 5000); 
                });
            } 
        }
        else if(buttonInteraction.customId === 'music_mute'){
            if(player.volume > 0){
                player.setVolume(0);
                await commandInteraction.reply(`üü¢ | ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡πÄ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞`).then(async(): Promise<void> =>{ 
                    await trackContent.edit({ embeds: [ await trackEmbed(client, player) ]});
                    setTimeout(async() =>{
                        await commandInteraction.deleteReply();
                    }, 5000); 
                });
            }
            else if(player.volume === 0){
                player.setVolume(80);
                await commandInteraction.reply(`üü¢ | ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡πÄ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞`).then(async(): Promise<void> =>{ 
                    await trackContent.edit({ embeds: [ await trackEmbed(client, player) ]});
                    setTimeout(async() =>{
                        await commandInteraction.deleteReply();
                    }, 5000); 
                });
            }
        }
    });
}

export default InteractionCreateEvent;