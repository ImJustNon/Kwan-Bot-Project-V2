import { Guild, GuildChannel, GuildMember, InteractionResponse, InteractionResponseType, InteractionType, Options, PermissionsBitField, ChannelType, Message} from "discord.js";
import { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, TextChannel } from 'discord.js';
import { CommandCallbackFunction, CommandCallbackFunctionParams, CommandConfig } from "../../types/CommandTypes";
import { poru } from "../../music/poruPlayer";
import { Player, supportedPlatforms, Track } from "poru";
import { Prisma, PrismaClient } from "@prisma/client";
import config from "../../config/config";

const prisma: PrismaClient = new PrismaClient();

const musicSetupCommand: CommandConfig = {
    name: 'music-setup',
    description: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á ‡πÄ‡πÄ‡∏Ñ‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á‡∏Å‡πá‡∏ü‡∏±‡∏á‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ',
    type: 1,
    options: [],
    userPermissions: [PermissionsBitField.Flags.Administrator],
    developersOnly: false,
    ownerOnly: false,
    category: 'music',
    callback: async({ client, interaction }: CommandCallbackFunctionParams): Promise<any> => {
        await interaction.reply({
            content: "‚åõ | ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏ã‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏ô‡πà‡∏∞",
        });
        
        try {
            const guildId: string | undefined = interaction.guild?.id;
            const findCurrentData = await prisma.guildMusicChannel.findUnique({
                where: {
                    guild_id: guildId
                }
            });

            if(findCurrentData){
                return interaction.followUp({
                    content: "üü° | ‡πÄ‡∏ã‡∏¥‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡πÑ‡∏ß‡πâ‡πÄ‡πÄ‡∏•‡πâ‡∏ß ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `/music-remove`",
                });
            }

            await CreateChannelAndSetupMessage();
            await interaction.editReply("üü¢ | ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡πÄ‡∏•‡πâ‡∏ß");
            async function CreateChannelAndSetupMessage(): Promise<void> {
                await interaction.guild?.channels.create({
                    name: `${client.user?.username}-music`,
                    type: ChannelType.GuildText,
                    parent: null,
                }).then(async(ch: TextChannel) =>{
                    const channelId: string = ch.id;
                    const authorId: string | undefined= interaction.member?.user.id;
                    const guildId: string | undefined = interaction.guild?.id;

                    await ch.setTopic(`play_pause: | ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏û‡∏•‡∏á ‡∏´‡∏£‡∏∑‡∏≠ ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ï‡πà‡∏≠ :track_next: | ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏û‡∏•‡∏á :stop_button: | ‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏•‡∏á :repeat: | ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ß‡∏ô‡∏ã‡πâ‡∏≥ :twisted_rightwards_arrows: | ‡∏™‡∏•‡∏±‡∏ö‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á :sound: | ‡∏•‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á :loud_sound: | ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á :speaker: | ‡∏õ‡∏¥‡∏î/‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á`);

                    let contentBannerId: string = "";
                    let contentqueueId: string = "";
                    let contentCurrentId: string = "";

                    await ch.send({
                        content: config.assets.musicChannel.bannerUrl,
                    }).then((msg: Message) => contentBannerId = msg.id);
                    await ch.send({
                        content: "**‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á:** \n‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏•‡∏á‡∏ô‡πà‡∏∞ "
                    }).then((msg: Message) => contentqueueId = msg.id);
                    await ch.send({
                        embeds: [
                            new EmbedBuilder().setColor(config.assets.musicChannel.defaultColor).setTitle("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà ‡∏ì ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ").setImage(config.assets.musicChannel.defaultUrl).setFooter({ text: "‡πÉ‡∏ä‡πâ /help ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°" }).setTimestamp(),
                        ],
                        components: [
                            new ActionRowBuilder<ButtonBuilder>().addComponents(
                                new ButtonBuilder().setCustomId(`music_pause`).setStyle(ButtonStyle.Success).setEmoji(`‚èØ`),
                                new ButtonBuilder().setCustomId(`music_skip`).setStyle(ButtonStyle.Secondary).setEmoji(`‚è≠`),
                                new ButtonBuilder().setCustomId(`music_stop`).setStyle(ButtonStyle.Danger).setEmoji(`‚èπ`),
                                new ButtonBuilder().setCustomId(`music_loop`).setStyle(ButtonStyle.Secondary).setEmoji(`üîÅ`),
                                new ButtonBuilder().setCustomId(`music_shuffle`).setStyle(ButtonStyle.Success).setEmoji(`üîÄ`),
                            ), 
                            new ActionRowBuilder<ButtonBuilder>().addComponents(
                                new ButtonBuilder().setCustomId(`music_volup`).setLabel(`‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á`).setStyle(ButtonStyle.Primary).setEmoji(`üîä`),
                                new ButtonBuilder().setCustomId(`music_voldown`).setLabel(`‡∏•‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á`).setStyle(ButtonStyle.Primary).setEmoji(`üîâ`),
                                new ButtonBuilder().setCustomId(`music_mute`).setLabel(`‡∏õ‡∏¥‡∏î/‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á`).setStyle(ButtonStyle.Primary).setEmoji(`üîà`),
                            ),
                        ],
                    }).then((msg: Message) => contentCurrentId = msg.id);

                    await prisma.guildMusicChannel.create({
                        data: {
                            guild_id: interaction.guild?.id as string,
                            channel_id: interaction.channel?.id as string,
                            author_id: interaction.user.id,
                            content_banner_id: contentBannerId,
                            content_queue_id: contentqueueId,
                            content_playing_id: contentCurrentId
                        }
                    }).catch(e =>{
                        return interaction.followUp({
                            content: "üî¥ | ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πà‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ",
                        });
                    });
                });
            }
        }
        catch(e){
            console.log(e);
            return interaction.followUp({
                content: "üî¥ | ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πà‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ"
            });
        }
        

        // console.log(findCurrentData)
    }
};

export default musicSetupCommand;